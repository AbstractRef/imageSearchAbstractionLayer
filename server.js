 /******************************************************
  * PLEASE DO NOT EDIT THIS FILE
  * the verification process may break
  * ***************************************************/
 'use strict';

 var fs = require('fs');
 var express = require('express');
 const GoogleImages = require('google-images');
 const client = new GoogleImages(process.env.CSE_KEY, process.env.GOOGLEAPI_KEY);
 var mongodbService = require('./mongodbService').mongoSearchDatastore;
 var app = express();

 if (!process.env.DISABLE_XORIGIN) {
     app.use(function(req, res, next) {
         var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
         var origin = req.headers.origin || '*';
         if (!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
             console.log(origin);
             res.setHeader('Access-Control-Allow-Origin', origin);
             res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
         }
         next();
     });
 }

 app.use('/public', express.static(process.cwd() + '/public'));

 app.route('/_api/package.json')
     .get(function(req, res, next) {
         console.log('requested');
         fs.readFile(__dirname + '/package.json', function(err, data) {
             if (err) return next(err);
             res.type('txt').send(data.toString());
         });
     });

 app.route('/search/:searchTerm').get(function(req, res, next) {
     var searchTerm = req.params.searchTerm;
     var offset = 1;

     if (parseInt(req.param('offset'))) {
         offset = parseInt(req.param('offset'));
     }

     mongodbService.storeSearchDetail(searchTerm);

     client.search(searchTerm, {
             page: offset
         })
         .then(images => {
             res.end(JSON.stringify(images));
         }).catch(err => {
             res.end(err);
         })
 });

 app.route('/recent').get(function(req, res, next) {

     mongodbService.getRecentSearches().then(searchHistory => {
         res.end(JSON.stringify(searchHistory));
     }).catch(err => {
         res.end(err);
     })
 });

 app.route('/')
     .get(function(req, res) {
         res.sendFile(process.cwd() + '/views/index.html');
     })

 // Respond not found to all the wrong routes
 app.use(function(req, res, next) {
     res.status(404);
     res.type('txt').send('Not found');
 });

 // Error Middleware
 app.use(function(err, req, res, next) {
     if (err) {
         res.status(err.status || 500)
             .type('txt')
             .send(err.message || 'SERVER ERROR');
     }
 })

 app.listen(process.env.PORT, function() {
     console.log('Node.js listening ...');
 });